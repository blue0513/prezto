
# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

#vagrant
export VAGRANT_DEFAULT_PROVIDER=vmware_fusion

#python
export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python2.7/site-packages/

#emacs
alias emacs='/Applications/Emacs.app/Contents/MacOS/Emacs -nw'
alias e='emacsclient'

#latex
export LATEXPATH=$LATEXPATH:/opt/local/bin/pdflatex

# # ブランチ名を色付きで表示させるメソッド
function rprompt-git-current-branch {
  local branch_name st branch_status
  # return
  
  # if [ ! -e  ".git" ]; then
  #   # gitで管理されていないディレクトリは何も返さない
  #   return
  # fi

  # branch_name=`git rev-parse --abbrev-ref HEAD 2> /dev/null`
  # st=`git status 2> /dev/null`
  branch_status="{blue}"
  
  # if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
  #   # 全てcommitされてクリーンな状態
  #   branch_status="%F{green}"
  # elif [[ -n `echo "$st" | grep "^Untracked files"` ]]; then
  #   # gitに管理されていないファイルがある状態
  #   branch_status="%F{red}?"
  # elif [[ -n `echo "$st" | grep "^Changes not staged for commit"` ]]; then
  #   # git addされていないファイルがある状態
  #   branch_status="%F{red}+"
  # elif [[ -n `echo "$st" | grep "^Changes to be committed"` ]]; then
  #   # git commitされていないファイルがある状態
  #   branch_status="%F{yellow}!"
  # elif [[ -n `echo "$st" | grep "^rebase in progress"` ]]; then
  #   # コンフリクトが起こった状態
  #   echo "%F{red}!(no branch)"
  #   return
  # else
  #   # 上記以外の状態の場合は青色で表示させる
  #   branch_status="%F{blue}"
  # fi

  # ブランチ名を色付きで表示する
  echo "${branch_status}[hoghogeho]"
}

# # プロンプトが表示されるたびにプロンプト文字列を評価、置換する
# setopt prompt_subst

# # プロンプトの右側(RPROMPT)にメソッドの結果を表示させる
# RPROMPT='`rprompt-git-current-branch`'

ssh-add -A 2>/dev/null;

# GO path
if [ -x "`which go`" ]; then
   export GOPATH=$HOME/Go
   export PATH=$PATH:$GOPATH/bin
fi

peco-select-history() {
    BUFFER=$(history 1 | sort -k1,1nr | perl -ne 'BEGIN { my @lines = (); } s/^\s*\d+\*?\s*//; $in=$_; if (!(grep {$in eq $_} @lines)) { push(@lines, $in); print $in; }' | peco --query "$LBUFFER")
        CURSOR=${#BUFFER}
	    zle reset-prompt
	    
}
zle -N peco-select-history
bindkey '^R' peco-select-history

ZSH_HIGHLIGHT_STYLES[path]='fg=cyan'
ZSH_HIGHLIGHT_STYLES[path_prefix]='none'

#cdとlsの省略
setopt auto_cd
function chpwd() { do_enter }

google() {
    local str opt
    if [ $# != 0 ]; then
        for i in $*; do
            # $strが空じゃない場合、検索ワードを+記号でつなぐ(and検索)
            str="$str${str:++}$i"
        done
        opt='search?num=100'
        opt="${opt}&q=${str}"
    fi
    open -a Google\ Chrome http://www.google.co.jp/$opt
}

qiita() {
    local str opt
    if [ $# != 0 ]; then
        for i in $*; do
            # $strが空じゃない場合、検索ワードを+記号でつなぐ(and検索)
            str="$str${str:++}$i"
        done
        opt='search?num=100'
        opt="${opt}&q=${str}"
    fi
    open -a Google\ Chrome http://qiita.com/$opt
}

HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
# setopt hist_ignore_dups     # ignore duplication command history list
setopt share_history        # share command history data

# Ctrl+Dでログアウトしてしまうことを防ぐ
setopt IGNOREEOF

# enhancd
source "$HOME/.zsh.d/enhancd/init.sh"
ENHANCD_FILTER=peco:fzf

# zsh-notify
source "$HOME/.zsh.d/zsh-notify/notify.plugin.zsh"

# z
source "$HOME/.zsh.d/z/z.sh"

# mysql-colorize
source "$HOME/.zsh.d/mysql-colorize/mysql-colorize.plugin.zsh"

function peco-z-search
{
  which peco z > /dev/null
  if [ $? -ne 0 ]; then
    echo "Please install peco and z"
    return 1
  fi
  local res=$(z | sort -rn | cut -c 12- | peco)
  if [ -n "$res" ]; then
    BUFFER+="cd $res"
    zle accept-line
  else
    return 1
  fi
}
zle -N peco-z-search
bindkey '^o' peco-z-search

# zsh-autosuggestions
source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=240'

# zsh-completions
if [ -e /usr/local/share/zsh-completions ]; then
    fpath=(/usr/local/share/zsh-completions $fpath)
fi

# 補完で小文字でも大文字にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# beep を無効にする
setopt no_beep

# command line editor
export EDITOR='emacs -nw'
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey '^Xe' edit-command-line

# # 以降をコメントとして扱う
setopt interactive_comments

# 終了ステータスが0以外の場合にステータスを表示する
setopt print_exit_value

# zsh-syntax-highlighting-filetypes
#source "$HOME/.zsh.d/zsh-syntax-highlighting-filetypes/zsh-syntax-highlighting-filetypes.zsh"

# zsh-history-substring-search
source "/usr/local/share/zsh-history-substring-search/zsh-history-substring-search.zsh"
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down

# 右側にgitの状態を可視化
source "$HOME/.zsh.d/zsh-git-prompt/zshrc.sh"
RPROMPT='`git_super_status`'

# Enterを押すと，lsとgit statusを表示
function do_enter() {
    if [ -n "$BUFFER" ]; then
        zle accept-line
        return 0
    fi
    echo
    ls
    # ↓おすすめ
    # ls_abbrev
    if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
        echo
        echo -e "\e[0;33m--- git status ---\e[0m"
        git status -sb
    fi
    zle reset-prompt
    return 0
}
zle -N do_enter
bindkey '^m' do_enter

# alias
alias -g mf='mdfind'
alias -g gs='git status'
alias -g gb='git branch'
alias -g ga='git add'
alias -g gc='git commit -m'
alias -g mv='mv -v -i'
alias -g ec='emacsclient -n'
alias -g glog='git log --oneline --decorate --graph --branches --tags --remotes --color'

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"

# for pdf-tools in emacs
export PKG_CONFIG_PATH=/usr/local/Cellar/zlib/1.2.8/lib/pkgconfig:/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig

export VISUAL='emacs'
